import json
from pathlib import Path
from typing import Any, Dict, List, Optional

def load_config(config_path: str) -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞.

    Args:
        config_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ JSON.

    Returns:
        Dict[str, Any]: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

    Raises:
        FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏.
    """
    config_file = Path(config_path)
    if not config_file.exists():
        raise FileNotFoundError(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    with config_file.open("r") as f:
        return json.load(f)

def get_run_id(model_name: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—É—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏.

    Args:
        model_name (str): –ò–º—è –º–æ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

    Returns:
        str: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—É—Å–∫–∞.
    """
    return Path(model_name).stem

def save_results_to_csv(
    results: Dict[str, float], 
    filename: str, 
    subset_name: str = None
) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV —Ñ–∞–π–ª.

    Args:
        results (Dict[str, float]): –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.
        filename (str): –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
        subset_name (str, optional): –ò–º—è –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö.
    """
    import pandas as pd
    
    results_df = pd.DataFrame([results])
    if subset_name:
        print(f"\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å–∞–±—Å–µ—Ç–∞ {subset_name}:")
    for key, value in results.items():
        print(f"  {key}: {value:.4f}")
    
    results_df.to_csv(filename, index=False)

def get_document_type_from_config(config: Dict[str, Any], dataset_path: Path) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–∏ –∫ –¥–∞—Ç–∞—Å–µ—Ç—É.

    Args:
        config (Dict[str, Any]): –°–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        dataset_path (Path): –ü—É—Ç—å –∫ –¥–∞—Ç–∞—Å–µ—Ç—É.

    Returns:
        str: –†—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
    """
    document_classes = config.get("document_classes", {})
    dataset_name = dataset_path.name

    for doc_type, doc_name in document_classes.items():
        if doc_type in dataset_name:
            return doc_name

    return dataset_name.replace("_", " ").title()
