###############################################################################
# Универсальный Dockerfile: dev и prod в одном                              #
# ─────────────────────────────────────────────────────────────────────────── #
#  • Параметризуем базовый CUDA-образ через ARG-и.                           #
#  • dev-сборка использует локальные pyproject.toml + uv.lock + packages.    #
#  • prod-сборка использует prod/pyproject.toml + prod/uv.lock (без src).   #
#                                                                            #
#  Сборка:                                                                   #
#    docker build -f docker/Dockerfile-uv --target dev  -t image:dev .       #
#    docker build -f docker/Dockerfile-uv --target prod -t image:prod .      #
###############################################################################

######################## 0. Параметры ########################################
ARG CUDA_VERSION=12.4.1
ARG CUDA_VARIANT=cudnn          # cudnn | runtime | base
ARG UBUNTU_VERSION=22.04
ARG CMAKE_VERSION=3.26.1

######################## 1. Базовый слой #####################################
FROM nvidia/cuda:${CUDA_VERSION}-${CUDA_VARIANT}-devel-ubuntu${UBUNTU_VERSION} AS base

ARG DEBIAN_FRONTEND=noninteractive
RUN apt-get update -y && \
    apt-get install -y --no-install-recommends \
        build-essential git git-lfs \
        python3 python3-distutils python3-dev python3-pip wget curl pkg-config \
        libsndfile1 ninja-build && \
    rm -rf /var/lib/apt/lists/*
RUN ln -s /usr/bin/python3 /usr/bin/python
RUN git lfs install

# ---- статический бинарь uv --------------------------------------------------
ENV UV_VERSION=0.7.16
RUN curl -LsSf https://astral.sh/uv/${UV_VERSION}/install.sh | sh
ENV PATH=/root/.local/bin:$PATH

###############################################################################
# 2.a deps-dev: окружение из корневого uv.lock (workspace + исходники)
###############################################################################
FROM base AS deps-devp
WORKDIR /build
COPY pyproject.toml uv.lock ./
COPY packages ./packages
COPY release_tool ./release_tool
RUN uv sync --locked

###############################################################################
# 2.b deps-prod: минимальное окружение из prod-lock (без исходников)
###############################################################################
FROM base AS deps-prod
WORKDIR /build
COPY prod/pyproject.toml prod/uv.lock ./
RUN uv sync --locked

###############################################################################
# 3. wheel-dev: сборка flash-attn в dev-env
###############################################################################
FROM deps-devp AS wheel-dev
WORKDIR /build
ARG CMAKE_VERSION
RUN curl -LO https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.sh \
    && chmod +x cmake-${CMAKE_VERSION}-linux-x86_64.sh \
    && ./cmake-${CMAKE_VERSION}-linux-x86_64.sh --skip-license --prefix=/usr/local \
    && rm cmake-${CMAKE_VERSION}-linux-x86_64.sh

ENV UV_NO_BUILD_ISOLATION=1
RUN uv pip install --no-cache-dir pip packaging psutil pybind11 && \
    mkdir -p /wheelhouse && \
    uv run python -m pip wheel flash-attn==2.6.1 \
        --no-deps --no-build-isolation -w /wheelhouse

###############################################################################
# 3.b wheel-prod: сборка flash-attn в prod-env
###############################################################################
FROM deps-prod AS wheel-prod
WORKDIR /build
ARG CMAKE_VERSION
# CMake (как выше)
RUN curl -LO https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.sh \
    && chmod +x cmake-${CMAKE_VERSION}-linux-x86_64.sh \
    && ./cmake-${CMAKE_VERSION}-linux-x86_64.sh --skip-license --prefix=/usr/local \
    && rm cmake-${CMAKE_VERSION}-linux-x86_64.sh

ENV UV_NO_BUILD_ISOLATION=1
RUN uv pip install --no-cache-dir pip packaging psutil pybind11 && \
    mkdir -p /wheelhouse && \
    uv run python -m pip wheel flash-attn==2.6.1 \
        --no-deps --no-build-isolation -w /wheelhouse

###############################################################################
# 4.a Финальный образ DEV
###############################################################################
FROM deps-devp AS dev
WORKDIR /workspace
# Копируем исходники для разработки
COPY . .
COPY --from=wheel-dev /wheelhouse/flash_attn*.whl /tmp/
RUN uv pip install --no-deps /tmp/flash_attn*.whl
ENV PATH="/workspace/.venv/bin:${PATH}"
CMD ["/bin/bash"]

###############################################################################
# 4.b Финальный образ PROD
###############################################################################
FROM base AS prod
WORKDIR /workspace
COPY prod/pyproject.toml prod/uv.lock ./
RUN uv sync --locked
COPY --from=wheel-prod /wheelhouse/flash_attn*.whl /tmp/
RUN uv pip install --no-deps /tmp/flash_attn*.whl
ENV PATH="/workspace/.venv/bin:${PATH}"
CMD ["/bin/bash"]